// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artkescha/checker/online_checker/pkg/tries/transmitter (interfaces: Transmitter)

// Package transmitter is a generated GoMock package.
package transmitter

import (
	reflect "reflect"

	send_solution "github.com/artkescha/grader_api/send_solution"
	gomock "github.com/golang/mock/gomock"
)

// MockTransmitter is a mock of Transmitter interface.
type MockTransmitter struct {
	ctrl     *gomock.Controller
	recorder *MockTransmitterMockRecorder
}

// MockTransmitterMockRecorder is the mock recorder for MockTransmitter.
type MockTransmitterMockRecorder struct {
	mock *MockTransmitter
}

// NewMockTransmitter creates a new mock instance.
func NewMockTransmitter(ctrl *gomock.Controller) *MockTransmitter {
	mock := &MockTransmitter{ctrl: ctrl}
	mock.recorder = &MockTransmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransmitter) EXPECT() *MockTransmitterMockRecorder {
	return m.recorder
}

// Transmit mocks base method.
func (m *MockTransmitter) Transmit(arg0 string, arg1 *send_solution.Try) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transmit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transmit indicates an expected call of Transmit.
func (mr *MockTransmitterMockRecorder) Transmit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transmit", reflect.TypeOf((*MockTransmitter)(nil).Transmit), arg0, arg1)
}
