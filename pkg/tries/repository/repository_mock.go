// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artkescha/checker/online_checker/pkg/tries/repository (interfaces: TriesRepo)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	try "github.com/artkescha/checker/online_checker/pkg/tries"
	gomock "github.com/golang/mock/gomock"
)

// MockTriesRepo is a mock of TriesRepo interface.
type MockTriesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTriesRepoMockRecorder
}

// MockTriesRepoMockRecorder is the mock recorder for MockTriesRepo.
type MockTriesRepoMockRecorder struct {
	mock *MockTriesRepo
}

// NewMockTriesRepo creates a new mock instance.
func NewMockTriesRepo(ctrl *gomock.Controller) *MockTriesRepo {
	mock := &MockTriesRepo{ctrl: ctrl}
	mock.recorder = &MockTriesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriesRepo) EXPECT() *MockTriesRepoMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockTriesRepo) GetByID(arg0 context.Context, arg1 uint64) (try.Try, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(try.Try)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockTriesRepoMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockTriesRepo)(nil).GetByID), arg0, arg1)
}

// Insert mocks base method.
func (m *MockTriesRepo) Insert(arg0 context.Context, arg1 try.Try) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTriesRepoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTriesRepo)(nil).Insert), arg0, arg1)
}

// List mocks base method.
func (m *MockTriesRepo) List(arg0 context.Context, arg1, arg2 uint32) ([]try.Try, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]try.Try)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTriesRepoMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTriesRepo)(nil).List), arg0, arg1, arg2)
}

// ListByUser mocks base method.
func (m *MockTriesRepo) ListByUser(arg0 context.Context, arg1 uint64, arg2, arg3 uint32) ([]try.Try, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUser", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]try.Try)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUser indicates an expected call of ListByUser.
func (mr *MockTriesRepoMockRecorder) ListByUser(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUser", reflect.TypeOf((*MockTriesRepo)(nil).ListByUser), arg0, arg1, arg2, arg3)
}
